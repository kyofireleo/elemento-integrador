/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package nominas;

import elemento.Elemento;
import java.awt.event.KeyEvent;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Abe
 */
public class Percepciones extends javax.swing.JFrame {

    /**
     * Creates new form Percepciones
     */
    private BigDecimal totalExento = BigDecimal.ZERO, totalGravado = BigDecimal.ZERO, totalSueldos = BigDecimal.ZERO;
    private utils.ConnectionFactory factory = new utils.ConnectionFactory(Elemento.log);
    private utils.Utils util = new utils.Utils(Elemento.log);
    private Integer idEmpleado;
    private boolean callNomina = false;
    public boolean nuevo;
    private Integer tipoNomina = null;
    private boolean isPtu = false;
    private BigDecimal importePtu = BigDecimal.ZERO;
    

    public Percepciones(int idEmpleado, boolean callNomina) {
        this.idEmpleado = idEmpleado;
        this.callNomina = callNomina;
        nuevo = !callNomina;
        initComponents();
        this.setLocationRelativeTo(null);
        obtenerPercepciones(idEmpleado);
        calcular();
    }
    
    public Percepciones(int idEmpleado, boolean callNomina, boolean isPtu, BigDecimal importePtu) {
        this.idEmpleado = idEmpleado;
        this.callNomina = callNomina;
        this.isPtu = isPtu;
        this.importePtu = importePtu;
        nuevo = !callNomina;
        initComponents();
        this.setLocationRelativeTo(null);
        obtenerPercepciones(idEmpleado);
        calcular();
    }

    public BigDecimal getTotalExento() {
        return totalExento;
    }

    public BigDecimal getTotalGravado() {
        return totalGravado;
    }
    
    public BigDecimal getTotalSueldos(){
        return totalSueldos;
    }

    //private Percepcion;
    public Percepciones() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    public Percepciones(int idEmpleado) {
        this.idEmpleado = idEmpleado;
        nuevo = true;
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        tipoPercepcion = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        clave = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        concepto = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        importeGravado = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        importeExento = new javax.swing.JTextField();
        agregar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        labelGravado = new javax.swing.JLabel();
        labelExento = new javax.swing.JLabel();
        guardar = new javax.swing.JButton();
        eliminar = new javax.swing.JButton();

        setTitle("Detalle Percepciones");

        jLabel1.setText("Tipo Percepcion");

        tipoPercepcion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "001,Sueldos, Salarios  Rayas y Jornales", "002,Gratificación Anual (Aguinaldo)", "003,Participación de los Trabajadores en las Utilidades PTU", "004,Reembolso de Gastos Médicos Dentales y Hospitalarios", "005,Fondo de Ahorro", "006,Caja de ahorro", "009,Contribuciones a Cargo del Trabajador Pagadas por el Patrón", "010,Premios por puntualidad", "011,Prima de Seguro de vida", "012,Seguro de Gastos Médicos Mayores", "013,Cuotas Sindicales Pagadas por el Patrón", "014,Subsidios por incapacidad", "015,Becas para trabajadores y/o hijos", "019,Horas extra", "020,Prima dominical", "021,Prima vacacional", "022,Prima por antigüedad", "023,Pagos por separación", "024,Seguro de retiro", "025,Indemnizaciones", "026,Reembolso por funeral", "027,Cuotas de seguridad social pagadas por el patrón", "028,Comisiones", "029,Vales de despensa", "030,Vales de restaurante", "031,Vales de gasolina", "032,Vales de ropa", "033,Ayuda para renta", "034,Ayuda para artículos escolares", "035,Ayuda para anteojos", "036,Ayuda para transporte", "037,Ayuda para gastos de funeral", "038,Otros ingresos por salarios", "039,Jubilaciones, pensiones o haberes de retiro", "044,Jubilaciones, pensiones o haberes de retiro en parcialidades", "045,Ingresos en acciones o títulos valor que representan bienes", "046,Ingresos asimilados a salarios", "047,Alimentación", "048,Habitación", "049,Premios por asistencia", "050,Viáticos" }));

        jLabel2.setText("Clave");

        clave.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                claveFocusLost(evt);
            }
        });

        jLabel3.setText("Concepto");

        concepto.setColumns(20);
        concepto.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        concepto.setLineWrap(true);
        concepto.setRows(5);
        concepto.setWrapStyleWord(true);
        concepto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                conceptoKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(concepto);

        jLabel4.setText("Importe Gravado");

        importeGravado.setText("0.0");
        importeGravado.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                importeGravadoMouseClicked(evt);
            }
        });
        importeGravado.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                importeGravadoFocusGained(evt);
            }
        });

        jLabel5.setText("Importe Exento");

        importeExento.setText("0.0");
        importeExento.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                importeExentoMouseClicked(evt);
            }
        });
        importeExento.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                importeExentoFocusGained(evt);
            }
        });

        agregar.setText("Agregar");
        agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarActionPerformed(evt);
            }
        });

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tipo Percepcion", "Clave", "Concepto", "Importe Gravado", "Importe Exento"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        DefaultTableModel model = (DefaultTableModel)tabla.getModel();
        model.addTableModelListener(
            new javax.swing.event.TableModelListener() 
            {
                public void tableChanged(javax.swing.event.TableModelEvent evt) 
                {
                    calcular();
                }
            }
        );
        jScrollPane2.setViewportView(tabla);

        labelGravado.setText("Total Gravado:");

        labelExento.setText("Total Exento:");

        guardar.setText("Guardar");
        guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarActionPerformed(evt);
            }
        });

        eliminar.setText("Eliminar");
        eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(tipoPercepcion, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jScrollPane1))
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(clave, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(importeGravado, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(18, 18, 18)
                                        .addComponent(importeExento, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(agregar)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(eliminar)))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelGravado)
                        .addGap(119, 119, 119)
                        .addComponent(labelExento)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(guardar)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tipoPercepcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(clave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(importeGravado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(importeExento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(agregar)
                            .addComponent(eliminar)))
                    .addComponent(jScrollPane1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelGravado)
                    .addComponent(labelExento)
                    .addComponent(guardar))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void conceptoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_conceptoKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 10) {
            evt.consume();
            //this.consultarProducto("descripcion", descripcion.getText().trim());
        }
        if (evt.getKeyCode() == KeyEvent.VK_TAB) {
            evt.consume();
            concepto.transferFocus();
        }
    }//GEN-LAST:event_conceptoKeyPressed

    private void agregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tabla.getModel();
        BigDecimal impG = new BigDecimal(importeGravado.getText());
        BigDecimal impE = new BigDecimal(importeExento.getText());

        String tipoPer = tipoPercepcion.getSelectedItem().toString().split(",")[0].trim();
        String cla = clave.getText().trim();
        if (cla.length() < 3) {
            JOptionPane.showMessageDialog(null, "La clave debe contener almenos 3 digitos. Por Ejemplo: 001");
        } else {
            String conce = concepto.getText().trim();

            Object[] x = {tipoPer, cla, conce, impG, impE};
            model.addRow(x);

            //calcular();
            limpiar();
        }
    }//GEN-LAST:event_agregarActionPerformed

    private void calcular() {
        DefaultTableModel model = (DefaultTableModel) tabla.getModel();
        BigDecimal impG, impE;
        totalGravado = BigDecimal.ZERO;
        totalExento = BigDecimal.ZERO;
        String tipo;

        for (int i = 0; i < model.getRowCount(); i++) {
            tipo = model.getValueAt(i, 0).toString();
            if (tipo.equals("007")) {
                impG = BigDecimal.ZERO;
                impE = BigDecimal.ZERO;
            } else {
                impG = new BigDecimal (model.getValueAt(i, 3).toString());
                impE = new BigDecimal (model.getValueAt(i, 4).toString());
            }
            totalGravado = util.redondear(totalGravado.add(impG));
            totalExento = util.redondear(totalExento.add(impE));
        }
        
        totalSueldos = totalGravado.add(totalExento);
        
        labelGravado.setText("Total Gravado: " + totalGravado.toString());
        labelExento.setText("Total Exento: " + totalExento.toString());
    }
    
    public void setTipoNomina(int tipoNomina){
        this.tipoNomina = tipoNomina;
        if(tipoNomina == 1 && !isPtu){ //Nomina Extraordinaria
            DefaultTableModel model = (DefaultTableModel) tabla.getModel();
            model.setRowCount(0);
        }else{
            obtenerPercepciones(idEmpleado);
        }
        calcular();
    }
    
    public Integer getTipoNomina(){
        return this.tipoNomina;
    }

    private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed
        // TODO add your handling code here:
        guardar();
    }//GEN-LAST:event_guardarActionPerformed

    private void importeGravadoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_importeGravadoMouseClicked
        // TODO add your handling code here:
        importeGravado.selectAll();
    }//GEN-LAST:event_importeGravadoMouseClicked

    private void importeExentoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_importeExentoMouseClicked
        // TODO add your handling code here:
        importeExento.selectAll();
    }//GEN-LAST:event_importeExentoMouseClicked

    private void importeGravadoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_importeGravadoFocusGained
        // TODO add your handling code here:
        importeGravado.selectAll();
    }//GEN-LAST:event_importeGravadoFocusGained

    private void importeExentoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_importeExentoFocusGained
        // TODO add your handling code here:
        importeExento.selectAll();
    }//GEN-LAST:event_importeExentoFocusGained

    private void eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tabla.getModel();
        int row = tabla.getSelectedRow();
        model.removeRow(row);
        //calcular();
    }//GEN-LAST:event_eliminarActionPerformed

    private void claveFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_claveFocusLost
        // TODO add your handling code here:
        consultarConcepto(clave.getText());
    }//GEN-LAST:event_claveFocusLost

    private void consultarConcepto(String clave) {
        Connection con = Elemento.odbc();
        Statement stmt = factory.stmtLectura(con);
        ResultSet rs;
        try {
            rs = stmt.executeQuery("SELECT * FROM ConceptosPercepciones WHERE clave like \'" + clave + "\'");
            if (rs.next()) {
                tipoPercepcion.setSelectedIndex(obtenerTipo(rs.getString("tipo")));
                this.clave.setText(rs.getString("clave"));
                concepto.setText(rs.getString("concepto"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
            Elemento.log.error("Excepcion al consultar el concepto con clave: " + clave, e);
        }
    }

    private int obtenerTipo(String tipo) {
        for (int i = 0; i < tipoPercepcion.getItemCount(); i++) {
            String x = tipoPercepcion.getItemAt(i).toString();
            if (x.contains(tipo)) {
                return i;
            }
        }
        return 0;
    }

    private void limpiar() {
        tipoPercepcion.setSelectedIndex(0);
        clave.setText("");
        concepto.setText("");
        importeGravado.setText("0.0");
        importeExento.setText("0.0");

        clave.transferFocusBackward();
    }

    private void guardar() {
        if (!callNomina) {
            guardarPercepciones();
            this.setVisible(false);
        } else {
            this.setVisible(false);
        }
    }

    private void guardarPercepciones() {
        Connection con = Elemento.odbc();
        Statement stmt = factory.stmtEscritura(con);
        DefaultTableModel model = (DefaultTableModel) tabla.getModel();
        if (nuevo) {
            borrarPercepciones(idEmpleado);
        }
        try {

            for (int i = 0; i < model.getRowCount(); i++) {
                BigDecimal ig = new BigDecimal (model.getValueAt(i, 3).toString());
                BigDecimal ie = new BigDecimal (model.getValueAt(i, 4).toString());

                String query = "INSERT INTO ImportesPercepciones (clave,idEmpleado,importeGravado,importeExento) "
                        + "VALUES (\'" + model.getValueAt(i, 1).toString() + "\'," + idEmpleado + ","
                        + ig.toString() + "," + ie.toString() + ")";
                stmt.executeUpdate(query);
            }
            stmt.close();
            con.close();
        } catch (SQLException e) {
            e.printStackTrace();
            Elemento.log.error("Excepcion al guardar las percepciones del empleado " + idEmpleado, e);
        } catch (Error err) {
            err.printStackTrace();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Windows look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Windows (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Percepciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Percepciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Percepciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Percepciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Percepciones().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agregar;
    private javax.swing.JTextField clave;
    private javax.swing.JTextArea concepto;
    private javax.swing.JButton eliminar;
    private javax.swing.JButton guardar;
    private javax.swing.JTextField importeExento;
    private javax.swing.JTextField importeGravado;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelExento;
    private javax.swing.JLabel labelGravado;
    public javax.swing.JTable tabla;
    private javax.swing.JComboBox tipoPercepcion;
    // End of variables declaration//GEN-END:variables

    private void obtenerPercepciones(int idEmpleado) {
        DefaultTableModel model = (DefaultTableModel) tabla.getModel();
        model.setRowCount(0);
        Object[] row = new Object[5];
        
        if(!isPtu){
            Connection con = Elemento.odbc();
            Statement stmt = factory.stmtLectura(con);
            Statement stmt2 = factory.stmtLectura(con);
            ResultSet rs, rs2;
            
            try {
                rs = stmt.executeQuery("SELECT * FROM ImportesPercepciones WHERE idEmpleado = " + idEmpleado);
                while (rs.next()) {
                    String claveD = rs.getString("clave");
                    rs2 = stmt2.executeQuery("SELECT * FROM ConceptosPercepciones WHERE clave = \'" + claveD + "\'");
                    if (rs2.next()) {
                        row[0] = rs2.getString("tipo");
                        row[1] = claveD;
                        row[2] = rs2.getString("concepto");
                        row[3] = rs.getString("importeGravado");
                        row[4] = rs.getString("importeExento");
                        model.addRow(row);
                    }
                }

                stmt.close();
                stmt2.close();
                con.close();
            } catch (SQLException e) {
                e.printStackTrace();
                Elemento.log.error("Excepcion al consultar las percepciones del empleado: " + idEmpleado, e);
            }
        }else{
            row[0] = "003";
            row[1] = "PTU";
            row[2] = "Pago de utilidades";
            row[3] = importePtu;
            row[4] = BigDecimal.ZERO;
            model.addRow(row);
        }
        
    }

    private void borrarPercepciones(int idEmpleado) {
        Connection con = Elemento.odbc();
        Statement stmt = factory.stmtEscritura(con);
        try {
            stmt.executeUpdate("DELETE FROM ImportesPercepciones WHERE idEmpleado=" + idEmpleado);
            stmt.close();
            con.close();
        } catch (Exception e) {
            e.printStackTrace();
            Elemento.log.error("Excepcion al guardar las percepciones", e);
        }
    }
}
