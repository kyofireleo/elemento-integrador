/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package nominas.configuracion;

import elemento.Elemento;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Abe
 */
public class ConceptosPercepciones extends javax.swing.JFrame {

    /**
     * Creates new form Percepciones
     */
    private Double totalExento=0.0, totalGravado=0.0;
    private utils.ConnectionFactory factory = new utils.ConnectionFactory(Elemento.log);
    private Integer idEmpleado;
    private boolean callNomina = false;
    
    public ConceptosPercepciones(){
        initComponents();
        this.setLocationRelativeTo(null);
        this.obtenerPercepciones();
    }

    public Double getTotalExento() {
        return totalExento;
    }

    public Double getTotalGravado() {
        return totalGravado;
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        tipoPercepcion = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        clave = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        concepto = new javax.swing.JTextArea();
        agregar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        guardar = new javax.swing.JButton();
        eliminar = new javax.swing.JButton();

        setTitle("Conceptos Percepciones");

        jLabel1.setText("Tipo Percepcion");

        tipoPercepcion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "001,Sueldos, Salarios Rayas y Jornales", "002,Gratificación Anual (Aguinaldo)", "003,Participación de los Trabajadores en las Utilidades PTU", "004,Reembolso de Gastos Médicos Dentales y Hospitalarios", "005,Fondo de Ahorro", "006,Caja de ahorro", "007,Vales", "008,Ayudas", "009,Contribuciones a Cargo del Trabajador Pagadas por el Patrón", "010,Premios por puntualidad", "011,Prima de Seguro de vida", "012,Seguro de Gastos Medicos Mayores", "013,Cuotas Sindicales Pagadas por el Patrón", "014,Subsidios por incapacidad", "015,Becas para trabajadores y/o hijos", "016,Otros", "017,Subsidio para el empleo", "018,Fomento al primer empleo", "019,Horas extra", "020,Prima dominical", "021,Prima vacacional", "022,Prima por antigüedad", "023,Pagos por separación", "024,Seguro de retiro", "025,Indeminizaciones", "026,Reembolso por funeral", "027,Cuotas de seguridad social pagadas por el patrón", "028,Comisiones" }));

        jLabel2.setText("Clave");

        clave.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                claveFocusGained(evt);
            }
        });

        jLabel3.setText("Concepto");

        concepto.setColumns(20);
        concepto.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        concepto.setLineWrap(true);
        concepto.setRows(5);
        concepto.setWrapStyleWord(true);
        concepto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                conceptoKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(concepto);

        agregar.setText("Agregar");
        agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarActionPerformed(evt);
            }
        });

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tipo Percepcion", "Clave", "Concepto"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tabla);

        guardar.setText("Guardar");
        guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarActionPerformed(evt);
            }
        });

        eliminar.setText("Eliminar");
        eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel1))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(tipoPercepcion, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane1))
                            .addGap(27, 27, 27)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(clave, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(agregar)
                                    .addGap(31, 31, 31)
                                    .addComponent(eliminar)))))
                    .addComponent(guardar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tipoPercepcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(clave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(agregar)
                            .addComponent(eliminar)))
                    .addComponent(jScrollPane1)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(guardar)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void conceptoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_conceptoKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == 10){
            evt.consume();
            //this.consultarProducto("descripcion", descripcion.getText().trim());
        }
        if(evt.getKeyCode() == KeyEvent.VK_TAB){
            evt.consume();
            concepto.transferFocus();
        }
    }//GEN-LAST:event_conceptoKeyPressed

    private void agregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel)tabla.getModel();
        
        String tipoPer = tipoPercepcion.getSelectedItem().toString().split(",")[0].trim();
        String cla = clave.getText().trim();
        String conce = concepto.getText().trim();
        if(cla.length() < 3){
            JOptionPane.showMessageDialog(null, "La clave debe contener almenos 3 digitos. Por Ejemplo: 001");
        }else{
            if(verificarClave(cla)){
                Object[] x = {tipoPer,cla,conce};
                model.addRow(x);
                limpiar();
            }
        }
    }//GEN-LAST:event_agregarActionPerformed
    
    private boolean verificarClave(String clave){
        for (int i = 0; i < tabla.getRowCount(); i++) {
            String c = tabla.getModel().getValueAt(i, 1).toString().trim();
            if(clave.trim().equalsIgnoreCase(c)){
                JOptionPane.showMessageDialog(null, "La clave "+clave+" ya esta siendo usada, ingese otra diferente");
                tipoPercepcion.transferFocus();
                return false;
            }
        }
        return true;
    }
    
    private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed
        // TODO add your handling code here:
        guardar();
    }//GEN-LAST:event_guardarActionPerformed

    private void eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel)tabla.getModel();
        int row = tabla.getSelectedRow();
        model.removeRow(row);
    }//GEN-LAST:event_eliminarActionPerformed

    private void claveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_claveFocusGained
        // TODO add your handling code here:
        clave.selectAll();
    }//GEN-LAST:event_claveFocusGained

    private void limpiar(){
        tipoPercepcion.setSelectedIndex(0);
        clave.setText("");
        concepto.setText("");
        
        clave.transferFocusBackward();
    }
    
    private void guardar(){
        if(!callNomina){
            guardarPercepciones();
            this.setVisible(false);
        }else{
            this.setVisible(false);
        }
    }
    
    private void guardarPercepciones(){
        Connection con = Elemento.odbc();
        Statement stmt = factory.stmtEscritura(con);
        DefaultTableModel model = (DefaultTableModel)tabla.getModel();
        borrarPercepciones();
        
        try {
            for (int i = 0; i < model.getRowCount(); i++) {
                String cla = (String)model.getValueAt(i, 1);
                String cone = (String)model.getValueAt(i, 2);
                String tipo = (String)model.getValueAt(i, 0);
                
                String query2 = "INSERT INTO ConceptosPercepciones (clave,concepto,tipo) "
                        + "VALUES (\'"+cla.trim()+"\',\'"+cone.trim()+"\',\'"+tipo.trim()+"\')";
                
                stmt.executeUpdate(query2);
            }
            stmt.close();
            con.close();
        } catch (SQLException e) {
            e.printStackTrace();
            Elemento.log.error("Excepcion al guardar los conceptos de las percepciones ",e);
        } catch (Error err){
            err.printStackTrace();
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Windows look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Windows (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConceptosPercepciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConceptosPercepciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConceptosPercepciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConceptosPercepciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConceptosPercepciones().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agregar;
    private javax.swing.JTextField clave;
    private javax.swing.JTextArea concepto;
    private javax.swing.JButton eliminar;
    private javax.swing.JButton guardar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JTable tabla;
    private javax.swing.JComboBox tipoPercepcion;
    // End of variables declaration//GEN-END:variables

    private void obtenerPercepciones() {
        Connection con = Elemento.odbc();
        Statement stmt2 = factory.stmtLectura(con);
        ResultSet rs2;
        DefaultTableModel model = (DefaultTableModel)tabla.getModel();
        Object [] row = new Object[5];
        
        try {
                rs2 = stmt2.executeQuery("SELECT * FROM ConceptosPercepciones");
                while(rs2.next()){
                    row[0] = rs2.getString("tipo");
                    row[1] = rs2.getString("clave");
                    row[2] = rs2.getString("concepto");
                    model.addRow(row);
                }
            
            stmt2.close();
            con.close();
        }catch (SQLException e) {
            e.printStackTrace();
            Elemento.log.error("Excepcion al consultar los conceptos de las percepciones",e);
        }
    }
    
    private void borrarPercepciones(){
        Connection con = Elemento.odbc();
        Statement stmt = factory.stmtEscritura(con);
        try {
            stmt.executeUpdate("DELETE FROM ConceptosPercepciones");
            stmt.close();
            con.close();
        } catch (Exception e) {
            e.printStackTrace();
            Elemento.log.error("Excepcion al borrar un concepto de percepcion",e);
        }
    }
}
