/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Factura_View.java
 *
 * Created on 14/10/2011, 09:10:00 PM
 */
package gui;

import elemento.ConnectionFactory;
import elemento.Donataria;
import elemento.Elemento;
import elemento.Emisor;
import elemento.Exe;
import elemento.ExpedidoEn;
import elemento.Factura;
import elemento.Layout;
import java.awt.event.KeyEvent;
import java.io.*;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import nominas.Empleado;

/**
 *
 * @author Abe
 */
public class Factura_View extends javax.swing.JFrame {

    DefaultTableModel model;
    DefaultComboBoxModel combo;
    DefaultComboBoxModel comboE;
    String folio = null;
    String serie = null;
    String leyenda = "";
    String mensaje = "";
    static String plantilla = null;
    public double porcentaje = 0.16;
    public boolean modificar;
    static utils.Utils util = new utils.Utils(Elemento.log);
    ConnectionFactory factory = new ConnectionFactory();
    Emisor emisor;
    String rfcE, rfc, nombre, calle, numExt, numInt, colonia, municipio, localidad, estado, pais, cp;
    int contadorComprobantes = 0;
    int creditosRestantes = 0;
    int idEmpleado;
    BigDecimal porcentajeIeps, importeIeps;
    List<Double> tasaIeps = new ArrayList();
    Empleado emp = null;

    /**
     * Creates new form Factura_View
     */
    public Factura_View() {
//        model = new DefaultTableModel();
//        model.addColumn("Cantidad");
//        model.addColumn("Unidad");
//        model.addColumn("No Identificacion");
//        model.addColumn("Descripcion");
//        model.addColumn("Precio");
//        model.addColumn("Importe");
//        model.addColumn("Aplica IVA");
        initComponents();
        setLocationRelativeTo(null);
        iniciar();
    }

    public Factura_View(String nada) {

    }

    public Factura_View(int idCliente) {
        initComponents();
        setLocationRelativeTo(null);
        iniciar();
        for (int i = 1; i < listaClientes.getItemCount(); i++) {
            int id = Integer.parseInt(listaClientes.getItemAt(i).toString().split(",")[0].trim());

            if (idCliente == id) {
                listaClientes.setSelectedIndex(i);
                break;
            }
        }

    }

    private void iniciar() {
        combo = (DefaultComboBoxModel) listaClientes.getModel();
        comboE = (DefaultComboBoxModel) listaEmisores.getModel();
        listaClientes.setModel(combo);
        listaEmisores.setModel(comboE);
        model = (DefaultTableModel) conceptos.getModel();
        consultar("Combo", "SELECT * FROM Clientes");
        consultar("ComboM", "SELECT idMetodo, nombre FROM MetodosPago");
        consultar("ComboE", "SELECT * FROM Emisores");
        listaEmisores.setSelectedIndex(0);
        consultar("Folio", "SELECT * FROM Folios WHERE idComprobante = " + getIdComprobante(tipocfd.getSelectedItem().toString().trim()) + " AND rfc like \'" + rfcE + "\'");
    }

    public int getIdComprobante(String tipo) {
        int idComprobante = 0;
        switch (tipo.toLowerCase()) {
            case "factura":
                idComprobante = 1;
                break;
            case "nota de credito":
                idComprobante = 2;
                break;
            case "recibo de donativos":
                idComprobante = 3;
                break;
            case "recibo de nomina":
                idComprobante = 4;
                break;
            case "recibo de notarios":
                idComprobante = 5;
                break;
        }
        return idComprobante;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        cantidad = new javax.swing.JTextField();
        precio = new javax.swing.JTextField();
        emitir = new javax.swing.JButton();
        cancelar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        conceptos = new javax.swing.JTable();
        agregarConcepto = new javax.swing.JButton();
        quitar = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        subtotal = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        total = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        iva = new javax.swing.JTextField();
        preFactura = new javax.swing.JButton();
        metodoCombo = new javax.swing.JComboBox();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        cuenta = new javax.swing.JTextField();
        aplicaIva = new javax.swing.JCheckBox();
        listaClientes = new javax.swing.JComboBox();
        jLabel21 = new javax.swing.JLabel();
        tipocfd = new javax.swing.JComboBox();
        jLabel22 = new javax.swing.JLabel();
        descuentoIva = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        listaEmisores = new javax.swing.JComboBox();
        jLabel25 = new javax.swing.JLabel();
        noIdentificacion = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        folioText = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        ivaRetenido = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        serieText = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        descripcion = new javax.swing.JTextArea();
        editarConcepto = new javax.swing.JButton();
        unidad = new javax.swing.JComboBox();
        jLabel28 = new javax.swing.JLabel();
        moneda = new javax.swing.JComboBox();
        tipoCambio = new javax.swing.JTextField();
        ajusteManual = new javax.swing.JCheckBox();
        jLabel29 = new javax.swing.JLabel();
        isrRetenido = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        descuentoSinIva = new javax.swing.JTextField();
        agregarLeyenda = new javax.swing.JButton();
        lbl_Restantes = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        verCte = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        ieps = new javax.swing.JTextField();
        aplicaIeps = new javax.swing.JCheckBox();
        jLabel11 = new javax.swing.JLabel();
        formaPago = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        condicionPago = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Crear CFDI");

        jLabel1.setText("Cliente");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Cantidad");

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Descripcion");

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Precio");

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Unidad");

        cantidad.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        cantidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cantidadActionPerformed(evt);
            }
        });
        cantidad.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cantidadFocusGained(evt);
            }
        });

        precio.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        precio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                precioActionPerformed(evt);
            }
        });

        emitir.setText("Emitir CFDi");
        emitir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emitirActionPerformed(evt);
            }
        });

        cancelar.setText("Cancelar");
        cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarActionPerformed(evt);
            }
        });

        conceptos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Clave", "Cantidad", "Unidad", "Descripcion", "Precio", "Importe", "IVA", "IEPS"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(conceptos);

        agregarConcepto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/add.png"))); // NOI18N
        agregarConcepto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarConceptoActionPerformed(evt);
            }
        });

        quitar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/DeleteRed.png"))); // NOI18N
        quitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitarActionPerformed(evt);
            }
        });

        jLabel6.setText("SubTotal");

        subtotal.setEditable(false);
        subtotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        subtotal.setText("0.00");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel8.setText("Total");

        total.setEditable(false);
        total.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        total.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        total.setText("0.00");

        jLabel9.setText("IVA");

        iva.setEditable(false);
        iva.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        iva.setText("0.00");

        preFactura.setText("Pre Facturar");
        preFactura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                preFacturaActionPerformed(evt);
            }
        });

        metodoCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione un Método" }));
        metodoCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metodoComboActionPerformed(evt);
            }
        });

        jLabel18.setText("Método de Pago");

        jLabel19.setText("Cuenta");

        cuenta.setText("_");
        cuenta.setEnabled(false);

        aplicaIva.setSelected(true);
        aplicaIva.setText("Aplica IVA");

        listaClientes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione un cliente" }));
        listaClientes.setName(""); // NOI18N
        listaClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaClientesActionPerformed(evt);
            }
        });

        jLabel21.setText("Tipo de comprobante");

        tipocfd.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                tipocfdItemStateChanged(evt);
            }
        });

        jLabel22.setText("Dcto. Art. IVA");

        descuentoIva.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        descuentoIva.setText("0.00");
        descuentoIva.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                descuentoIvaMouseClicked(evt);
            }
        });
        descuentoIva.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                descuentoIvaInputMethodTextChanged(evt);
            }
        });
        descuentoIva.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                descuentoIvaKeyPressed(evt);
            }
        });

        jLabel24.setText("Emisor");

        listaEmisores.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listaEmisoresMouseClicked(evt);
            }
        });
        listaEmisores.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                listaEmisoresItemStateChanged(evt);
            }
        });

        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel25.setText("No Identificacion");

        noIdentificacion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                noIdentificacionKeyPressed(evt);
            }
        });

        jLabel26.setText("Folio");

        jLabel23.setText("IVA Retenido");

        ivaRetenido.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        ivaRetenido.setText("0.00");
        ivaRetenido.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ivaRetenidoMouseClicked(evt);
            }
        });
        ivaRetenido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ivaRetenidoActionPerformed(evt);
            }
        });
        ivaRetenido.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ivaRetenidoKeyPressed(evt);
            }
        });

        jLabel27.setText("Serie");

        descripcion.setColumns(20);
        descripcion.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        descripcion.setLineWrap(true);
        descripcion.setRows(5);
        descripcion.setWrapStyleWord(true);
        descripcion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                descripcionKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(descripcion);

        editarConcepto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/edit-29.png"))); // NOI18N
        editarConcepto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarConceptoActionPerformed(evt);
            }
        });

        unidad.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-", "NA", "NO APLICA", "SERVICIO", "DONATIVO", "KILOGRAMO", "GRAMO", "METRO", "METRO CUADRADO", "METRO CUBICO", "PIEZA", "SEGUNDO", "CABEZA", "LITRO", "PAR", "KILOWATT", "MILLAR", "JUEGO", "KILOWATT/HORA", "TONELADA", "BARRIL", "GRAMO NETO", "DECENAS", "CIENTOS", "DOCENAS", "CAJA", "BOTELLA" }));

        jLabel28.setText("Moneda");

        moneda.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "MXN", "USD", "EUR" }));
        moneda.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                monedaItemStateChanged(evt);
            }
        });

        tipoCambio.setText("1.0");
        tipoCambio.setEnabled(false);

        ajusteManual.setText("Ajuste Manual");
        ajusteManual.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ajusteManualMouseClicked(evt);
            }
        });
        ajusteManual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ajusteManualActionPerformed(evt);
            }
        });
        ajusteManual.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                ajusteManualPropertyChange(evt);
            }
        });

        jLabel29.setText("ISR Retenido");

        isrRetenido.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        isrRetenido.setText("0.00");
        isrRetenido.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                isrRetenidoMouseClicked(evt);
            }
        });
        isrRetenido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isrRetenidoActionPerformed(evt);
            }
        });
        isrRetenido.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                isrRetenidoKeyPressed(evt);
            }
        });

        jLabel30.setText("Dcto. Art. S/IVA");

        descuentoSinIva.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        descuentoSinIva.setText("0.00");
        descuentoSinIva.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                descuentoSinIvaMouseClicked(evt);
            }
        });
        descuentoSinIva.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                descuentoSinIvaKeyPressed(evt);
            }
        });

        agregarLeyenda.setText("Leyenda");
        agregarLeyenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarLeyendaActionPerformed(evt);
            }
        });

        lbl_Restantes.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lbl_Restantes.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabel2.setText("Creditos Restantes");

        verCte.setText("Ver");
        verCte.setEnabled(false);
        verCte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verCteActionPerformed(evt);
            }
        });

        jLabel10.setText("IEPS");

        ieps.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        ieps.setText("0.00");
        ieps.setEnabled(false);

        aplicaIeps.setText("Aplica IEPS");

        jLabel11.setText("Foma de Pago");

        formaPago.setText("PAGO EN UNA SOLA EXHIBICION");
        formaPago.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formaPagoFocusGained(evt);
            }
        });

        jLabel12.setText("Condiciones de Pago");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel24)
                                        .addGap(18, 18, 18)
                                        .addComponent(listaEmisores, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(40, 40, 40)
                                        .addComponent(jLabel1))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel18)
                                            .addComponent(jLabel11))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(metodoCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(31, 31, 31)
                                                .addComponent(jLabel19)
                                                .addGap(18, 18, 18)
                                                .addComponent(cuenta, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(formaPago, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(37, 37, 37)
                                                .addComponent(jLabel12))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(noIdentificacion)
                                            .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(26, 26, 26)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(cantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(unidad, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(29, 29, 29)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(26, 26, 26)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(precio, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(aplicaIva)
                                                    .addComponent(aplicaIeps))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(editarConcepto, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                                    .addComponent(agregarConcepto, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(quitar, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(22, 22, 22)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(condicionPago, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(18, 18, 18)
                                                        .addComponent(jLabel28)
                                                        .addGap(18, 18, 18)
                                                        .addComponent(moneda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(18, 18, 18)
                                                        .addComponent(tipoCambio, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(jLabel21)
                                                        .addGap(18, 18, 18)
                                                        .addComponent(tipocfd, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(36, 36, 36)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(jLabel27, javax.swing.GroupLayout.Alignment.TRAILING)
                                                            .addGroup(layout.createSequentialGroup()
                                                                .addGap(2, 2, 2)
                                                                .addComponent(jLabel26)))
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                            .addComponent(folioText)
                                                            .addComponent(serieText, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addComponent(listaClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(verCte)))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(lbl_Restantes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 5, Short.MAX_VALUE))
                            .addComponent(jScrollPane2))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel30)
                                    .addComponent(jLabel22))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(descuentoIva)
                                    .addComponent(descuentoSinIva, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE))
                                .addGap(52, 52, 52)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel23)
                                    .addComponent(jLabel29))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(isrRetenido)
                                    .addComponent(ivaRetenido, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(49, 49, 49)
                                .addComponent(jLabel10)
                                .addGap(18, 18, 18)
                                .addComponent(ieps, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel9)
                                            .addComponent(jLabel6))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(iva)
                                            .addComponent(subtotal, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(ajusteManual)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(emitir)
                                .addGap(35, 35, 35)
                                .addComponent(preFactura)
                                .addGap(31, 31, 31)
                                .addComponent(agregarLeyenda)
                                .addGap(31, 31, 31)
                                .addComponent(cancelar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(48, 48, 48))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel24)
                            .addComponent(listaEmisores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(listaClientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(verCte))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel18)
                            .addComponent(metodoCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel19)
                            .addComponent(cuenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel21)
                            .addComponent(tipocfd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel27)
                                .addComponent(serieText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel26, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(folioText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbl_Restantes, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(formaPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(condicionPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel28)
                    .addComponent(moneda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tipoCambio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jLabel7)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(unidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel4)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(precio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(15, 15, 15)
                                    .addComponent(aplicaIva)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(aplicaIeps))
                                .addComponent(jScrollPane1))
                            .addGap(9, 9, 9))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(agregarConcepto)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(editarConcepto)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(quitar)
                            .addGap(11, 11, 11)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(cantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel25)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(noIdentificacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel30)
                            .addComponent(descuentoSinIva, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel29)
                            .addComponent(isrRetenido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)
                            .addComponent(ieps, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel22)
                            .addComponent(descuentoIva, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel23)
                            .addComponent(ivaRetenido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ajusteManual)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(subtotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(iva, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(emitir)
                                    .addComponent(preFactura)
                                    .addComponent(cancelar)
                                    .addComponent(agregarLeyenda))
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cantidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cantidadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cantidadActionPerformed

    private void precioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_precioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_precioActionPerformed

    private void emitirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emitirActionPerformed
        if(validar()){
            String nom = listaClientes.getSelectedItem().toString();
            int indice = nom.indexOf(",");
            nombre = nom.substring(indice + 1);

            if (tipocfd.getSelectedItem().toString().equalsIgnoreCase("Recibo de Nomina")) {
                try {
                    emp = getEmpleado(idEmpleado);
                    Elemento.leerConfig(emisor.getRfc());
                    Factura fact = setearFactura("");
                    nominas.Nominas nomi = new nominas.Nominas(fact, emp, nombre, rfc);
                    nomi.setVisible(true);
                    int folioNext = Integer.parseInt(folio) + 1;
                    this.folioText.setText("" + folioNext);
                } catch (SQLException | NumberFormatException ex) {
                    ex.printStackTrace();
                    Elemento.log.error("Excepcion al consultar el empelado", ex);
                } catch (Error err) {
                    err.printStackTrace();
                }
            } else {
                crearLayout("");
            }
        }else{
            JOptionPane.showMessageDialog(null, mensaje, "Error", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_emitirActionPerformed

    private boolean validar(){
        if (listaClientes.getSelectedIndex() == 0) {
            mensaje = "No se ha seleccionado ningun cliente, seleccione e intentelo de nuevo.";
            return false;
        }
        
        if (model.getRowCount() == 0) {
            mensaje = "Necesita almenos un concepto o articulo para poder continuar";
            return false;
        }
        
        if (creditosRestantes == 0) {
            mensaje = "El Emisor con RFC: " + rfcE + " no cuenta con\ncreditos. Llame al (667)2-80-29-66 \no al 2-80-44-44 para aquirir mas";
            return false;
        }
        
        if(metodoCombo.getSelectedIndex() == 0){
            mensaje = "Debe seleccionar un metodo de pago";
            return false;
        }
        
        return true;
    }
    
    private Empleado getEmpleado(int idEmpleado) throws SQLException {
        Empleado empleado;
        Statement stmtE = factory.stmtLectura(Elemento.odbc());
        ResultSet rsE = stmtE.executeQuery("SELECT * FROM Empleados WHERE id = " + idEmpleado);
        if (rsE.next()) {
            empleado = new Empleado();
            empleado.setBanco(rsE.getString("banco"));
            empleado.setClabe(rsE.getString("clabe"));
            empleado.setCurp(rsE.getString("curp"));
            empleado.setDepartamento(rsE.getString("departamento"));
            empleado.setFechaInicialRelLaboral(rsE.getDate("fechaInicialRelLaboral"));
            empleado.setIdEmpleado(rsE.getInt("idEmpleado"));
            empleado.setNss(rsE.getString("nss"));
            empleado.setNumEmpleado(rsE.getLong("numEmpleado"));
            empleado.setPeriodicidadPago(rsE.getString("periodicidadPago"));
            empleado.setPuesto(rsE.getString("puesto"));
            empleado.setRiesgoPuesto(rsE.getString("riesgoPuesto"));
            empleado.setSalarioBaseCotApor(rsE.getBigDecimal("salarioBaseCotApor"));
            empleado.setSalarioDiarioInt(rsE.getBigDecimal("salarioDiarioInt"));
            empleado.setTipoContrato(rsE.getString("tipoContrato"));
            empleado.setTipoJornada(rsE.getString("tipoJornada"));
            empleado.setTipoRegimen(rsE.getInt("tipoRegimen"));
            rsE.close();
            stmtE.close();
            return empleado;
        } else {
            return null;
        }
    }

    private void crearLayout(String condicion) {
        Elemento.leerConfig(emisor.getRfc());
        Layout layout = null;
        Factura fact = setearFactura(condicion);

        int folioNext = Integer.parseInt(folio) + 1;

        if (!modificar) {
            layout = new Layout(fact);
        } else {
            layout = new Layout(fact, folio);
        }

        if (condicion.equals("")) {
            listaClientes.setSelectedIndex(0);
            rfc = "";
            cantidad.setText("");
            unidad.setSelectedIndex(0);
            descripcion.setText("");
            precio.setText("");
            subtotal.setText("");
            descuentoIva.setText("0.00");
            descuentoSinIva.setText("0.00");
            iva.setText("0.00");
            ivaRetenido.setText("0.00");
            isrRetenido.setText("0.00");
            total.setText("0.00");
            folioText.setText("" + folioNext);
            ieps.setText("0.00");
            //layout.conectar();
            model.setRowCount(0);
        }

    }

//    private String consultarSerie(String tipoCfd){
//        Connection con = Elemento.odbc();
//        Statement stmt = factory.stmtLectura(con);
//        ResultSet rs;
//        String ser = "F";
//        try{
//            rs = stmt.executeQuery("SELECT serie FROM Folios WHERE idComprobante = "+tipoCfd);
//            if(rs.next()){
//                ser = rs.getString("serie");
//            }
//        }catch(Exception ex){
//            ex.printStackTrace();
//            Elemento.log.error("Excepcion al consultar la Serie: " + ex.getMessage());
//        }
//        return ser;
//    }
    private Factura setearFactura(String condicion) {
        List<String> conc = new ArrayList();
        String aux = "";
        String rfce = rfc;
        String sub = subtotal.getText().trim(),
                iv = iva.getText().trim(),
                tot = total.getText().trim();
        boolean continuar = true;
        String idEmisor = listaEmisores.getSelectedItem().toString().split(",")[0];
        Donataria donat = obtenerDonataria(idEmisor);

        if (emisor == null) {
            consultar("Emisores", "SELECT * FROM Emisores WHERE id=" + idEmisor);
        }

        Elemento.leerConfig(emisor.getRfc());

        while (!validarRfc(rfce)) {
            int op = JOptionPane.showConfirmDialog(null, "El RFC " + rfce + " es invalido, desea cambiarlo?");
            switch (op) {
                case 0:
                    rfce = JOptionPane.showInputDialog("Cambie el RFC por uno válido:");
                    break;
                case 1:
                    JOptionPane.showMessageDialog(null, "Se utilizara el RFC Generico: XAXX010101000");
                    rfce = "XAXX010101000";
                    break;
                case 2:
                    continuar = false;
                    break;
            }
            rfc = rfce;
            if (!continuar) {
                break;
            } else if (op == 1) {
                break;
            }
        }
        if (continuar) {
            for (int i = 0; i < model.getRowCount(); i++) {
                aux = "C" + (i + 1) + ": ";
                for (int j = 0; j < model.getColumnCount(); j++) {
                    aux += model.getValueAt(i, j) + "@";
                }
                aux = aux.substring(0, aux.length() - 1);
                conc.add(aux);
            }
            System.out.println(aux);
            Layout layout = null;
            Factura fact = new Factura();
            folio = folioText.getText().trim();
            serie = serieText.getText().trim();

            double ivR = Double.parseDouble(ivaRetenido.getText().trim());
            double isr = Double.parseDouble(isrRetenido.getText().trim());
            double ivaT = Double.parseDouble(iv);
            double desTot = redondear(Double.parseDouble(descuentoIva.getText().trim()) + Double.parseDouble(descuentoSinIva.getText().trim()));

            //Asginamos valores de la factura
            fact.emisor = emisor;
            fact.folio = folio;
            fact.serie = serie;
            fact.nombre = nombre;
            fact.rfc = rfce;
            fact.calle = calle;
            fact.colonia = colonia;
            fact.numExt = numExt;
            fact.numInt = numInt;
            fact.localidad = localidad;
            fact.cp = cp;
            fact.municipio = municipio;
            fact.estado = estado;
            fact.pais = pais;
            fact.conceptos = conc;
            fact.subtotal = Double.parseDouble(sub);
            fact.descuento = desTot;
            fact.motivoDescuento = "_";
            fact.iva = ivaT;
            fact.ivaRetenido = ivR;
            fact.total = Double.parseDouble(tot);
            fact.formaPago = "PAGO EN UNA SOLA EXHIBICION";
            fact.tipoCfd = tipocfd.getSelectedItem().toString().trim().toLowerCase();
            fact.metodoPago = metodoCombo.getSelectedItem().toString().split(" ")[0].trim();
            fact.cuentaBancaria = cuenta.getText().trim();
            fact.lugarExpedicion = Elemento.lugarExpedicion;
            fact.condicionPago = condicionPago.getText().trim();
            fact.moneda = moneda.getSelectedItem().toString().trim();
            fact.tipoCambio = tipoCambio.getText().trim().trim();
            fact.isrRetenido = isr;
            fact.idEmpleado = idEmpleado;
            fact.setDonataria(donat);

            if (tasaIeps.size() > 0) {
                fact.porIeps = redondear(tasaIeps.get(0) * 100);
                fact.totalIeps = new Double(ieps.getText());
            }

            fact.totalRetenidos = redondear(ivR + isr);
            fact.totalTraslados = ivaT;
            fact.leyenda = leyenda;
            fact.prefactura = condicion;

            if (importeIeps != null) {
                fact.totalIeps = importeIeps.doubleValue();
                fact.porIeps = porcentajeIeps.doubleValue();
            }
            return fact;
        }
        return null;
    }

    public boolean validarRfc(String rfc) {
        rfc = rfc.toUpperCase().trim();
        if (rfc.contains(" ")) {
            return false;
        } else if (rfc.contains("&")) {
            return true;
        } else {
            return rfc.toUpperCase().matches("[A-Z]{4}[0-9]{6}[A-Z0-9]{3}") || rfc.toUpperCase().matches("[A-Z]{3}[0-9]{6}[A-Z0-9]{3}");
        }
    }

    private void cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarActionPerformed
        Elemento.log.info("Se ha cerrado el programa");
        this.setVisible(false);
    }//GEN-LAST:event_cancelarActionPerformed

    private void agregarConceptoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarConceptoActionPerformed
        Object[] concept = new Object[8];
        BigDecimal cant = new BigDecimal(cantidad.getText().trim());
        BigDecimal prec = new BigDecimal(precio.getText().trim()).setScale(2, RoundingMode.HALF_UP);
        BigDecimal impor = redondear(cant.doubleValue() * prec.doubleValue(), 2);
        Boolean aplica = aplicaIva.isSelected();
        Boolean aplIeps = aplicaIeps.isSelected();

        concept[0] = noIdentificacion.getText();
        concept[1] = cant.toString();
        concept[2] = unidad.getSelectedItem().toString();
        concept[3] = descripcion.getText();
        concept[4] = prec.toString();
        concept[5] = impor.toString();
        concept[6] = aplica;
        concept[7] = aplIeps;

        model.addRow(concept);

        if (aplicaIeps.isSelected()) {
            porcentajeIeps = new BigDecimal(JOptionPane.showInputDialog(null, "Ingresa el porcentaje de IEPS a aplicar:", new Double(8.0)));

            if (porcentajeIeps.doubleValue() < 1) {
                tasaIeps.add(porcentajeIeps.doubleValue());
            } else {
                tasaIeps.add(redondear(porcentajeIeps.doubleValue() / 100));
            }
        }

        cantidad.setText("");
        unidad.setSelectedIndex(0);
        noIdentificacion.setText("");
        descripcion.setText("");
        precio.setText("");
        aplicaIva.setSelected(true);
        aplicaIeps.setSelected(false);
        cantidad.transferFocusBackward();

        calcular();
        //agregarProducto();
    }//GEN-LAST:event_agregarConceptoActionPerformed

//    private void agregarProducto(){
//        Connection con = Elemento.odbc();
//        Statement stmt = factory.stmtEscritura(con);
//        String query = "INSERT INTO Productos VALUES ("
//                    + "\'"+noIdentificacion.getText().trim()+"\',\'"+descripcion.getText().trim()+"\', \'"+unidad.getSelectedItem().toString().trim()+"\',\'"
//                    +precio.getText().trim()+"\',";
//        try{
//            if(aplicaIva.isSelected()){
//                query += Boolean.TRUE + ")";
//            }else{
//                query += Boolean.FALSE + ")";
//            }
//            stmt.executeUpdate(query);
//            stmt.close();
//            con.close();
//            Elemento.log.info("El producto " + descripcion.getText().trim() + " fue agregado correctamente...");
//        }catch(Exception e){
//            e.printStackTrace();
//            System.out.println(e.getCause().getMessage());
//            Elemento.log.error("Excepcion al agregar un producto desde CrearCFDi: " + e.getMessage());
//        }
//    }

    private void quitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitarActionPerformed
        int row = conceptos.getSelectedRow();
        if ((Boolean) model.getValueAt(row, 7)) {
            tasaIeps.remove(row);
        }
        model.removeRow(row);
        calcular();
    }//GEN-LAST:event_quitarActionPerformed

    private void preFacturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preFacturaActionPerformed
        crearLayout("PREFACTURA");
    }//GEN-LAST:event_preFacturaActionPerformed

    public final void consultar(String x, String query) {
        Connection con = Elemento.odbc();
        Statement stmt = factory.stmtLectura(con);

        try {
            ResultSet rs = stmt.executeQuery(query);
            if (rs.next()) {
                rs.previous();
                while (rs.next()) {
                    switch (x) {
                        case "Folio":
                            folio = "" + rs.getInt("ultimo_folio");
                            serie = rs.getString("serie").trim();
                            plantilla = rs.getString("plantilla").trim();
                            if (folioText != null) {
                                folioText.setText(folio);
                                serieText.setText(serie);
                            }
                            break;
                        case "Combo":
                            listaClientes.addItem(rs.getInt("id") + "," + rs.getString("nombre"));
                            break;
                        case "ComboM":
                            metodoCombo.addItem(rs.getString("nombre"));
                            break;
                        case "Campos":
                            int idCliente = rs.getInt("id");
                            Statement stmtE = factory.stmtLectura(con);
                            ResultSet rsE = stmtE.executeQuery("SELECT id FROM Empleados WHERE idEmpleado = " + idCliente);
                            boolean cont = false;
                            if (rsE.next()) {
                                for (int i = 0; i < tipocfd.getItemCount(); i++) {
                                    String xs = tipocfd.getItemAt(i).toString().trim();
                                    if (xs.equals("Recibo de Nomina")) {
                                        cont = true;
                                    }
                                }
                                if (!cont) {
                                    if (emisor.getEmitirNominas()) {
                                        tipocfd.addItem("Recibo de Nomina");
                                    }
                                }
                                idEmpleado = rsE.getInt("id");
                            }
                            
                            rsE.close();
                            stmtE.close();
                            
                            rfc = rs.getString("rfc");
                            nombre = rs.getString("nombre");
                            calle = rs.getString("calle");
                            numExt = rs.getString("noExterior");
                            numInt = rs.getString("noInterior");
                            colonia = rs.getString("colonia");
                            localidad = rs.getString("localidad");
                            municipio = rs.getString("municipio");
                            estado = rs.getString("estado");
                            pais = rs.getString("pais");
                            cp = rs.getString("cp");

                            break;
                        case "ComboE":
                            listaEmisores.addItem(rs.getInt("id") + "," + rs.getString("nombre"));
                            break;
                        case "Emisores":
                            emisor = setearEmisor(rs);
                            break;
                    }
                }
            } else {
                borrarTodo();
            }
            if (x.equalsIgnoreCase("ComboE")) {
                checarComprobantes();
            }
            rs.close();
            stmt.close();
            con.close();
        } catch (Exception ex) {
            Elemento.log.error("Excepcion: No se pudo consultar los Clientes: " + ex.getLocalizedMessage(), ex);
            ex.printStackTrace();
        }
    }

    private void checarComprobantes() {
        tipocfd.removeAllItems();
        String tmp = comboE.getSelectedItem().toString();
        String idEmi = tmp.split(",")[0].trim();

        Connection con = Elemento.odbc();
        Statement stmtC = factory.stmtLectura(con);
        ResultSet rsC;
        int restantes = 0;
        try {
            consultar("Emisores", "SELECT * FROM Emisores WHERE id=" + idEmi);
            rfcE = emisor.getRfc();

            rsC = stmtC.executeQuery("SELECT * FROM Cuentas WHERE rfc like \'" + rfcE + "\'");
            if (rsC.next()) {
                Boolean facts = rsC.getBoolean("facturas");
                Boolean notas = rsC.getBoolean("notasCredito");
                Boolean dona = rsC.getBoolean("recibosDonativos");
                restantes = rsC.getInt("creditosRestantes");

                creditosRestantes = restantes;

                if (facts) {
                    tipocfd.addItem("Factura");
                }
                if (notas) {
                    tipocfd.addItem("Nota de Credito");
                }
                if (dona) {
                    tipocfd.addItem("Recibo de Donativos");
                }
                if (emisor.getEmitirNominas()) {
                    tipocfd.addItem("Recibo de Nomina");
                }

            }
            rsC.close();
            con.close();
            prepararFolio(rfcE);
        } catch (Exception ex) {
            ex.printStackTrace();
            Elemento.log.error("Excepcion al checaar los tipos de comprobante admitidos para el cliente: " + tmp + " : " + ex.getMessage(), ex);
        } finally {
            try {
                stmtC.close();
                con.close();
            } catch (SQLException sex) {
                sex.printStackTrace();
            }
        }
        if (restantes == 0) {
            if (contadorComprobantes == 0) {
                JOptionPane.showMessageDialog(null, "El Emisor con RFC: " + rfcE + " no cuenta con\ncreditos. Llame al (667)2-80-29-66 \no al 2-80-44-44 para aquirir mas");
                contadorComprobantes = 1;
            } else if (contadorComprobantes == 1) {
                contadorComprobantes = 0;
            }
//            int num = listaEmisores.getItemCount();
//            int index = listaEmisores.getSelectedIndex();
//            if(num > 1){
//                if(index > 0){
//                    listaEmisores.setSelectedIndex(0);
//                }else{
//                    listaEmisores.setSelectedIndex(1);
//                }
//            }
        }
    }

    private void borrarTodo() {
        rfc = "";
        calle = "";
        numExt = "";
        numInt = "";
        colonia = "";
        localidad = "";
        municipio = "";
        estado = "";
        pais = "";
        cp = "";
        if (listaClientes != null) {
            listaClientes.setSelectedIndex(0);
        }

        if (model != null) {
            model.setRowCount(0);
        }
    }

    private void listaClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaClientesActionPerformed
        // TODO add your handling code here:
        if (combo.getSize() > 0) {
            String cond = combo.getSelectedItem().toString();
            if (!cond.contains("Seleccione un")) {
                verCte.setEnabled(true);
                String id = cond.split(",")[0];
                if (emisor.getEmitirNominas() && tipocfd.getSelectedItem().toString().equalsIgnoreCase("Recibo de Nomina")) {
                    consultar("Campos", "SELECT * FROM EmpleadosRec WHERE id = " + id);
                } else {
                    consultar("Campos", "SELECT * FROM Clientes WHERE id = " + id);
                }
            } else {
                verCte.setEnabled(false);
            }
        }
    }//GEN-LAST:event_listaClientesActionPerformed

    private void metodoComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metodoComboActionPerformed
        // TODO add your handling code here:
        boolean cond = metodoCombo.getSelectedItem().toString().equalsIgnoreCase("98 NA") || metodoCombo.getSelectedItem().toString().equalsIgnoreCase("99 Otros") || metodoCombo.getSelectedItem().toString().equalsIgnoreCase("01 Efectivo");
        if (!cond) {
            cuenta.setEnabled(true);
            cuenta.setText("");
            metodoCombo.transferFocus();
        } else {
            cuenta.setEnabled(false);
            cuenta.setText("_");
            cuenta.transferFocus();
        }
    }//GEN-LAST:event_metodoComboActionPerformed

    private void descuentoIvaInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_descuentoIvaInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_descuentoIvaInputMethodTextChanged

    private void descuentoIvaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_descuentoIvaKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 10) { //Tecla Enter
//            double sb = Double.parseDouble(subtotal.getText().trim());
//            double iv;
//            double de = Double.parseDouble(descuento.getText().trim());
//            double tot;
//            double ivr = Double.parseDouble(ivaRetenido.getText().trim());
//            
//            double porIva;
//            String ivaText = iva.getText().trim();
//            if(ivaText.equalsIgnoreCase("0.00") || ivaText.equalsIgnoreCase("0.0")){
//                porIva = 0.0;
//            }else{
//                porIva = 0.16;
//            }
//            
//            sb = redondear(sb-de);
//            iv = redondear(sb*porIva);
//            tot = redondear(sb+(iv-ivr));
//
//            iva.setText(""+iv);
//            total.setText(""+tot);
            calcular();
        }
    }//GEN-LAST:event_descuentoIvaKeyPressed

    private void ivaRetenidoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ivaRetenidoKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 10) {
//            if(!(iva.getText().trim().equalsIgnoreCase("0.0") || iva.getText().trim().equalsIgnoreCase("0.00"))){
//                double iv = Double.parseDouble(iva.getText().trim());
//                double ivr = Double.parseDouble(ivaRetenido.getText().trim());
//                double des = Double.parseDouble(descuento.getText().trim());
//                double sb = Double.parseDouble(subtotal.getText().trim());
//                double tot = (sb-des)+(iv-ivr);
//
//                total.setText(""+redondear(tot));
//            }else{
//                ivaRetenido.setText("0.00");
//            }
            calcular();
        }
    }//GEN-LAST:event_ivaRetenidoKeyPressed

    private void ivaRetenidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ivaRetenidoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ivaRetenidoActionPerformed

    private void noIdentificacionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_noIdentificacionKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            this.consultarProducto("noIdentificacion", noIdentificacion.getText().trim());
        }
    }//GEN-LAST:event_noIdentificacionKeyPressed


    private void listaEmisoresItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_listaEmisoresItemStateChanged
        // TODO add your handling code here:
        checarComprobantes();
        lbl_Restantes.setText("" + creditosRestantes);
    }//GEN-LAST:event_listaEmisoresItemStateChanged


    private void tipocfdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_tipocfdItemStateChanged
        // TODO add your handling code here:
        prepararFolio(rfcE);
        String id = listaEmisores.getSelectedItem().toString().split(",")[0];
        if (tipocfd.getItemCount() > 0) {
            listaClientes.removeAllItems();
            if (tipocfd.getSelectedItem().toString().equals("Recibo de Nomina")) {
                listaClientes.addItem("Seleccione un empleado");
                consultar("Combo", "SELECT * FROM EmpleadosRec WHERE idEmisor = " + id);
            } else {
                listaClientes.addItem("Seleccione un cliente");
                consultar("Combo", "SELECT * FROM Clientes");
            }
        }
    }//GEN-LAST:event_tipocfdItemStateChanged

    private void editarConceptoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarConceptoActionPerformed
        // TODO add your handling code here:
        int pos = conceptos.getSelectedRow();
        noIdentificacion.setText(model.getValueAt(pos, 0).toString());
        cantidad.setText(model.getValueAt(pos, 1).toString());
        unidad.setSelectedItem(model.getValueAt(pos, 2).toString().trim());
        descripcion.setText(model.getValueAt(pos, 3).toString());
        precio.setText(model.getValueAt(pos, 4).toString());
        aplicaIva.setSelected((Boolean) model.getValueAt(pos, 6));
        model.removeRow(pos);

        calcular();
    }//GEN-LAST:event_editarConceptoActionPerformed

    private void ajusteManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ajusteManualActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ajusteManualActionPerformed

    private void ajusteManualMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ajusteManualMouseClicked
        // TODO add your handling code here:
        if (ajusteManual.isSelected()) {
            subtotal.setEditable(true);
            iva.setEditable(true);
            total.setEditable(true);
        } else {
            subtotal.setEditable(false);
            iva.setEditable(false);
            total.setEditable(false);
        }
    }//GEN-LAST:event_ajusteManualMouseClicked

    private void ajusteManualPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_ajusteManualPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_ajusteManualPropertyChange

    private void monedaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_monedaItemStateChanged
        // TODO add your handling code here:
        if (!moneda.getSelectedItem().toString().equalsIgnoreCase("MXN")) {
            tipoCambio.setEnabled(true);
            moneda.transferFocus();
            tipoCambio.setText("");
        } else {
            tipoCambio.setEnabled(false);
            tipoCambio.setText("1.0");
        }
    }//GEN-LAST:event_monedaItemStateChanged

    private void isrRetenidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isrRetenidoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_isrRetenidoActionPerformed

    private void isrRetenidoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_isrRetenidoKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 10) {
            calcular();
        }
    }//GEN-LAST:event_isrRetenidoKeyPressed

    private void descuentoSinIvaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_descuentoSinIvaKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 10) {
            calcular();
        }
    }//GEN-LAST:event_descuentoSinIvaKeyPressed

    private void descripcionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_descripcionKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 10) {
            evt.consume();
            this.consultarProducto("descripcion", descripcion.getText().trim());
        }
        if (evt.getKeyCode() == KeyEvent.VK_TAB) {
            evt.consume();
            descripcion.transferFocus();
        }
    }//GEN-LAST:event_descripcionKeyPressed

    private void agregarLeyendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarLeyendaActionPerformed
        // TODO add your handling code here:
        leyenda = JOptionPane.showInputDialog("Ingrese la leyenda que desea mostrar en el comprobante:                     ", leyenda);
        if (leyenda == null) {
            leyenda = "";
        } else {
            leyenda = leyenda.trim();
        }
    }//GEN-LAST:event_agregarLeyendaActionPerformed

    private void listaEmisoresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listaEmisoresMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_listaEmisoresMouseClicked

    private void descuentoSinIvaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_descuentoSinIvaMouseClicked
        // TODO add your handling code here:
        descuentoSinIva.selectAll();
    }//GEN-LAST:event_descuentoSinIvaMouseClicked

    private void descuentoIvaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_descuentoIvaMouseClicked
        // TODO add your handling code here:
        descuentoIva.selectAll();
    }//GEN-LAST:event_descuentoIvaMouseClicked

    private void isrRetenidoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_isrRetenidoMouseClicked
        // TODO add your handling code here:
        isrRetenido.selectAll();
    }//GEN-LAST:event_isrRetenidoMouseClicked

    private void ivaRetenidoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ivaRetenidoMouseClicked
        // TODO add your handling code here:
        ivaRetenido.selectAll();
    }//GEN-LAST:event_ivaRetenidoMouseClicked

    private void verCteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verCteActionPerformed
        // TODO add your handling code here:
        CteUpdate cte = new CteUpdate(listaClientes.getSelectedItem().toString().split(",")[0]);
        cte.setVisible(true);
        cte.crearComprobante.setEnabled(false);
        listaClientes.setSelectedIndex(0);
        verCte.setEnabled(false);
    }//GEN-LAST:event_verCteActionPerformed

    private void cantidadFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cantidadFocusGained
        if (!noIdentificacion.getText().trim().isEmpty() && descripcion.getText().trim().isEmpty()) {
            this.consultarProducto("noIdentificacion", noIdentificacion.getText().trim());
        }
    }//GEN-LAST:event_cantidadFocusGained

    private void formaPagoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formaPagoFocusGained
        formaPago.selectAll();
    }//GEN-LAST:event_formaPagoFocusGained

    private void prepararFolio(String rfcE) {
        if (tipocfd.getItemCount() > 0) {
            int tipo = getIdComprobante(tipocfd.getSelectedItem().toString().trim());
            consultar("Folio", "SELECT * FROM Folios WHERE rfc like \'" + rfcE + "\' AND idComprobante = " + tipo);
        }
    }

    public static void visualizar(String ruta, String name) throws Exception {
        String xml;
//        if(name.contains("_PREFACTURA")){
//            xml = ruta+name.replace("_PREFACTURA", " ").trim()+".xml";
//        }else{
//            xml = ruta+name+".xml";
//        }
        xml = ruta + name + ".xml";
        String pdf = Elemento.pathPdf;
        if (plantilla == null || plantilla.equalsIgnoreCase("")) {
            plantilla = Elemento.pathPlantillas + "FacturaE_V1.jasper";
        }
        String logo = Elemento.logo;

        util.generarPdf(pdf, xml, name, logo, plantilla, true);
    }

    public static void visualizar(String ruta, String name, String email) {
        String xml = ruta + name + ".xml";
        String pdf = Elemento.pathPdf;
        if (plantilla == null || plantilla.equalsIgnoreCase("")) {
            plantilla = Elemento.pathPlantillas + "FacturaE_V1.jasper";
        }
        String logo = Elemento.logo;
        try {
            util.generarPdf(pdf, xml, name, logo, plantilla, false);
            util.enviarEmail("", "", email, name + " : SERVICIO DE REPOSITORIO", xml, pdf + name + ".pdf", name + ".xml", name + ".pdf");
            Exe.exeSinTiempo(pdf + name + ".pdf");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void visualizarInterpretado(String ruta, String rutaModificado, String name, String email) {
        String xml = ruta + name + ".xml";
        String xmlModificado = rutaModificado + name + ".xml";
        String pdf = Elemento.pathPdf;
        if (plantilla == null || plantilla.equalsIgnoreCase("")) {
            plantilla = Elemento.pathPlantillas + "FacturaE_V1.jasper";
        }
        String logo = Elemento.logo;
        try {
            util.generarPdf(pdf, xmlModificado, name, logo, plantilla, false);
            util.enviarEmail("", "", email, name + " : SERVICIO DE REPOSITORIO", xml, pdf + name + ".pdf", name + ".xml", name + ".pdf");
            Exe.exeSinTiempo(pdf + name + ".pdf");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void calcular() {
        double sub = 0.0;
        double subNeto;
        double iv = 0.0;
        double tot;
        double desIva = Double.parseDouble(descuentoIva.getText().trim());
        double desSiva = Double.parseDouble(descuentoSinIva.getText().trim());
        double isrRet = Double.parseDouble(isrRetenido.getText().trim());
        double ivRet = Double.parseDouble(ivaRetenido.getText().trim());
        double ie = 0.0;

        BigDecimal subt, tota, ivaT, descI, descS, isrR, ivR, iEPS;

        Double aux;
        Boolean aplica, aplIeps;
        List<Double> importesIva = new ArrayList();
        List<Double> importesIeps = new ArrayList();

        for (int i = 0; i < model.getRowCount(); i++) {
            aplica = (Boolean) model.getValueAt(i, 6);
            aplIeps = (Boolean) model.getValueAt(i, 7);
            aux = Double.parseDouble(model.getValueAt(i, 5).toString());

            if (aplica.booleanValue()) {
                importesIva.add(aux);
            }

            if (aplIeps.booleanValue()) {
                importesIeps.add(aux);
            }

            sub += aux.doubleValue();
        }

        subNeto = (sub - (desIva + desSiva));

        for (int i = 0; i < importesIeps.size(); i++) {
            ie += redondear(importesIeps.get(i).doubleValue() * tasaIeps.get(i).doubleValue());
        }

        for (Double var : importesIva) {
            iv += (var.doubleValue());
        }

        iv = (iv - desIva) * porcentaje;

        tot = subNeto + iv - ivRet - isrRet + ie;

        ivaT = this.redondear(iv, 2);
        subt = this.redondear(sub, 2);
        tota = this.redondear(tot, 2);

        ieps.setText("" + ie);
        subtotal.setText(subt.toString());
        iva.setText(ivaT.toString());
        total.setText(tota.toString());
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Windows look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Windows (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Factura_View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new Factura_View().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agregarConcepto;
    private javax.swing.JButton agregarLeyenda;
    private javax.swing.JCheckBox ajusteManual;
    private javax.swing.JCheckBox aplicaIeps;
    private javax.swing.JCheckBox aplicaIva;
    private javax.swing.JButton cancelar;
    private javax.swing.JTextField cantidad;
    private javax.swing.JTable conceptos;
    private javax.swing.JTextField condicionPago;
    private javax.swing.JTextField cuenta;
    private javax.swing.JTextArea descripcion;
    private javax.swing.JTextField descuentoIva;
    private javax.swing.JTextField descuentoSinIva;
    private javax.swing.JButton editarConcepto;
    private javax.swing.JButton emitir;
    private javax.swing.JTextField folioText;
    private javax.swing.JTextField formaPago;
    private javax.swing.JTextField ieps;
    private javax.swing.JTextField isrRetenido;
    private javax.swing.JTextField iva;
    private javax.swing.JTextField ivaRetenido;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbl_Restantes;
    private javax.swing.JComboBox listaClientes;
    private javax.swing.JComboBox listaEmisores;
    private javax.swing.JComboBox metodoCombo;
    private javax.swing.JComboBox moneda;
    private javax.swing.JTextField noIdentificacion;
    private javax.swing.JButton preFactura;
    private javax.swing.JTextField precio;
    private javax.swing.JButton quitar;
    private javax.swing.JTextField serieText;
    private javax.swing.JTextField subtotal;
    private javax.swing.JTextField tipoCambio;
    private javax.swing.JComboBox tipocfd;
    private javax.swing.JTextField total;
    private javax.swing.JComboBox unidad;
    private javax.swing.JButton verCte;
    // End of variables declaration//GEN-END:variables

    private double redondear(double d) {
        return Math.rint(d * 100) / 100;
    }

    private BigDecimal redondear(double number, int digits) {
        return new BigDecimal(number).setScale(digits, RoundingMode.HALF_UP);
    }

    public void agregarFactura(String serie, String folio, String rfcEmi, String rfc, String nombre, String fecha, BigDecimal total, String datos, String layout, String xml, Boolean timbre, String fechaTimbrado, String uuid, Long transId, String tipoCfd) {
        Connection con;
        Statement stmt;
        SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
        try {
            con = Elemento.odbc();
            stmt = factory.stmtEscritura(con);
            //Fecha Expedicion
            Date date = new Date(format.parse(fecha).getTime());
            java.sql.Date dateSql = new java.sql.Date(date.getTime());
            //Fecha Timbrado
            Date dateT = new Date(format.parse(fechaTimbrado).getTime());
            java.sql.Date dateSqlTim = new java.sql.Date(dateT.getTime());
            String status;
            if (timbre) {
                status = "VIGENTE";
            } else if (layout.contains("PREFACTURA")) {
                status = "PREFACTURA";
                layout = layout.replace("PREFACTURA", "").trim();
            } else {
                status = "NO TIMBRADA";
            }

            if (!modificar) {
                stmt.executeUpdate("INSERT INTO Facturas VALUES (\'" + serie.trim() + "\'," + folio.trim() + ",\'" + rfcEmi.trim() + "\',\'" + rfc.trim() + "\',\'" + nombre.trim() + "\',\'" + dateSql + "\',\'" + total.toString() + "\',\'" + layout.trim() + "\',\'" + xml.trim() + "\'," + timbre + ",\'" + dateSqlTim + "\',\'" + uuid.trim() + "\',\'" + transId + "\',\'" + status + "\',\'" + getIdComprobante(tipoCfd) + "\')");
                //stmt.executeQuery("INSERT INTO Folios VALUES (\'Factura Siguiente\')");
            } else {
                stmt.executeUpdate("UPDATE Facturas SET rfc=\'" + rfc.trim() + "\', nombre=\'" + nombre.trim() + "\', fecha=\'" + dateSql + "\',total=\'" + total.toString() + "\', layout= \'" + layout.trim() + "\' , xml= \'" + xml.trim() + "\' , timbrado=" + timbre + ", status=\'" + status + "\', fecha_timbrado=\'" + dateSqlTim + "\', uuid=\'" + uuid.trim() + "\', transId=\'" + transId + "\'"
                        + "WHERE folio = " + folio.trim() + " AND serie like \'" + serie.trim() + "\' AND rfcEmisor like \'" + rfcEmi.trim() + "\'");
            }
            stmt.close();
            con.close();
        } catch (ParseException | SQLException e) {
            Elemento.log.error("Se presento un error al agregar una factura ala base de datos: " + e.getLocalizedMessage(), e);
            e.printStackTrace();
        }
    }

    public static String leerXML(String ruta) {
        String texto = null;
        StringBuilder sb = new StringBuilder();
        File file = new File(ruta);
        BufferedReader entrada;

        try {
            String ren = "";
            entrada = new BufferedReader((new InputStreamReader(new FileInputStream(file), "utf-8")));
            while (entrada.ready()) {
                ren = entrada.readLine();
                boolean bo = ren.matches("");
                if (ren.contains("ñ") || ren.contains("Ñ") || ren.contains("Ã‘")) {
                    if (ren.contains("Ã‘")) {
                        ren = ren.replace("Ã‘", "Ñ");
                    }
                    ren = ren.toUpperCase();
                    ren = ren.replace('Ñ', '\u00d1');
                }
                if (!bo) {
                    sb.append(ren + "\r\n");
                }
            }
            texto = sb.toString();
        } catch (IOException e) {
            e.printStackTrace();
            Elemento.log.error("Se presento una excepcion al leer el XML: " + e.getMessage(), e);
        }
        return texto;
    }

    public void vistaModificar(String nombre, String rfc, String folio, String[][] conceptos) {

        for (int i = 1; i < listaClientes.getItemCount(); i++) {
            if (listaClientes.getItemAt(i).toString().contains(nombre)) {
                listaClientes.setSelectedIndex(i);
                break;
            }
        }

        this.rfc = rfc;
        this.folio = folio;
        String[] cols = {"Cantidad", "Unidad", "Descripcion", "Precio", "Importe", "Aplica IVA"};
        model.setDataVector(conceptos, cols);
        modificar = true;
        calcular();
    }

    private Emisor setearEmisor(ResultSet rs) {
        try {
            Emisor emi = new Emisor();
            Connection con;
            Statement stmt;
            ResultSet res;
            int idEmisor = rs.getInt("id");
            emi.setNombre(rs.getString("nombre").trim());
            emi.setRfc(rs.getString("rfc").trim());
            emi.setCalle(rs.getString("calle").trim());
            emi.setNoExterior(rs.getString("noExterior").trim());
            emi.setNoInterior(rs.getString("noInterior").trim());
            emi.setColonia(rs.getString("colonia").trim());
            emi.setLocalidad(rs.getString("localidad").trim());
            emi.setMunicipio(rs.getString("municipio").trim());
            emi.setEstado(rs.getString("estado").trim());
            emi.setPais(rs.getString("pais").trim());
            emi.setCp(rs.getString("cp").trim());
            emi.setEmitirNominas(rs.getBoolean("emiteNominas"));
            emi.setRegistroPatronal(rs.getString("registroPatronal"));

            emi.setExpedidoEn(obtenerExpedidoEn(idEmisor));

            con = Elemento.odbc();
            stmt = factory.stmtLectura(con);
            res = stmt.executeQuery("SELECT * FROM Cuentas WHERE rfc like \'" + emi.getRfc() + "\'");
            if (res.next()) {
                emi.setRegimenFiscal(res.getString("regimenFiscal").trim());
            }
            stmt.close();
            con.close();
            return emi;
        } catch (Exception ex) {
            ex.printStackTrace();
            Elemento.log.error("Excepcion al setear el Emisor: " + ex.getMessage(), ex);
            Elemento.log.error("Causa: " + ex.getCause().getMessage(), ex);
            return null;
        }
    }

    private void consultarProducto(String campo, String valor) {
        Connection con = Elemento.odbc();
        Statement stmt = factory.stmtLectura(con);
        ResultSet rs;
        try {
            String query;
            if (campo.equalsIgnoreCase("descripcion")) {
                query = "SELECT * FROM Productos WHERE " + campo + " like \'%" + valor + "%\'";
            } else {
                query = "SELECT * FROM Productos WHERE " + campo + " like \'" + valor + "\'";
            }
            rs = stmt.executeQuery(query);
            if (rs.next()) {
                unidad.setSelectedItem(rs.getString("unidad").trim());
                noIdentificacion.setText(rs.getString("noIdentificacion"));
                descripcion.setText(rs.getString("descripcion"));
                precio.setText("" + rs.getDouble("precio"));
                aplicaIva.setSelected(rs.getBoolean("aplicaIva"));
                noIdentificacion.transferFocus();
            }
            rs.close();
            stmt.close();
            con.close();
        } catch (Exception ex) {
            ex.printStackTrace();
            Elemento.log.error("Excepcion al consultar un producto: " + ex.getMessage(), ex);
        }
    }

    private ExpedidoEn obtenerExpedidoEn(int idEmisor) {
        Connection con = Elemento.odbc();
        Statement stmt = factory.stmtLectura(con);
        ResultSet rs;
        ExpedidoEn xx = null;

        try {
            rs = stmt.executeQuery("SELECT * FROM Sucursales WHERE idEmisor = " + idEmisor);
            if (rs.next()) {
                xx = new ExpedidoEn();
                xx.setCalle(rs.getString("calle"));
                xx.setCodigoPostal(rs.getString("cp"));
                xx.setColonia(rs.getString("colonia"));
                xx.setEstado(rs.getString("estado"));
                xx.setLocalidad(rs.getString("localidad"));
                xx.setMunicipio(rs.getString("municipio"));
                xx.setNoExterior(rs.getString("noExterior"));
                xx.setNoInterior(rs.getString("noInterior"));
                xx.setPais(rs.getString("pais"));
            }
            stmt.close();
            con.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return xx;
    }

    private Donataria obtenerDonataria(String idEmisor) {
        Donataria donat = null;
        try {
            Connection con = Elemento.odbc();
            Statement stmt = factory.stmtLectura(con);
            ResultSet rs = stmt.executeQuery("SELECT * FROM Donatarias WHERE idEmisor = " + idEmisor);
            if(rs.next()){
                donat = new Donataria();
                donat.setFechaAutorizacion(rs.getDate("fechaAuto"));
                donat.setNoAutorizacion(rs.getString("noAuto"));
                donat.setIdEmisor(new Integer(idEmisor));
            }
            rs.close();
            stmt.close();
            con.close();
            return donat;
        } catch (SQLException | NumberFormatException e) {
            e.printStackTrace();
            Elemento.log.error("Excepcion al obtener los datos de donatarias ",e);
            return null;
        }
    }
}
